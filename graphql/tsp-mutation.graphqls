interface UserError {
    # A description of the error
    message: String!
    # A path to the input value that caused the error
    path: [String!]
}

type TraceNotFound implements UserError {
  message: String!
  path: [String!]
}

type TraceTypeNotSupported implements UserError {
  message: String!
  path: [String!]
}

type TraceConflict implements UserError {
  message: String!
  path: [String!]
}

type ExperimentUpdateError implements UserError {
  message: String!
  path: [String!]
}

union ImportTraceError = TraceNotFound | TraceTypeNotSupported | TraceConflict

type ImportTracePayload {
  trace: Trace
  userErrors: [ImportTraceError!]
}

type DeleteTracePayload {
  trace: Trace
  success: Boolean
}

type CreationExperimentPayload {
  experiment: Experiment
  userErrors: [ExperimentUpdateError!]
}

type DeleteExperimentPayload {
  experiment: Experiment
  success: Boolean
}

type Mutation {
  importTrace(uri: String!, name: String, typeId: String) : ImportTracePayload
  deleteTrace(traceId: ID!, deleteTrace: Boolean, removeCache: Boolean): DeleteTracePayload

  createOrUpdateExperiment(traceIds: [ID!]!, name: String!, experimentId: ID): CreationExperimentPayload
  deleteExperiment(experimentId: ID!): DeleteExperimentPayload
}